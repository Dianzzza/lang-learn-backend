generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Użytkownicy
model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now())

  // relacje
  flashcards     Flashcard[]     @relation("UserFlashcards")
  progress       UserFlashcard[]
  tests          Test[]
  duelsAsPlayer1 Duel[]          @relation("Player1")
  duelsAsPlayer2 Duel[]          @relation("Player2")
  duelsWon       Duel[]          @relation("Winner")
}

/// Kategorie (owoce, zwierzęta, itd.)
model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  flashcards  Flashcard[]
  quizzes     Quiz[]
  tests       TestTemplate[]
}

/// Fiszki (globalne i prywatne)
model Flashcard {
  id           Int              @id @default(autoincrement())
  front        String
  back         String
  isGlobal     Boolean          @default(false)
  ownerId      Int?             // null = globalna fiszka
  owner        User?            @relation("UserFlashcards", fields: [ownerId], references: [id])
  categoryId   Int?
  category     Category?        @relation(fields: [categoryId], references: [id])
  createdAt    DateTime         @default(now())
  userProgress UserFlashcard[]
}

/// Stan nauki fiszek dla użytkownika
model UserFlashcard {
  id           Int       @id @default(autoincrement())
  userId       Int
  flashcardId  Int
  learned      Boolean   @default(false)
  toReview     Boolean   @default(false)
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id])
  flashcard    Flashcard @relation(fields: [flashcardId], references: [id])

  @@unique([userId, flashcardId])
}

/// Quiz (wybór brakującego słowa)
model Quiz {
  id          Int       @id @default(autoincrement())
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  question    String    // zdanie z brakującym słowem
  correctWord String    // poprawna odpowiedź
  createdAt   DateTime  @default(now())
}

/// Szablon testu (wpisywanie słowa przez użytkownika)
model TestTemplate {
  id          Int       @id @default(autoincrement())
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  sentence    String    // zdanie z brakującym słowem
  answer      String    // poprawna odpowiedź
  createdAt   DateTime  @default(now())

  tests       Test[]
}

/// Wykonany test przez użytkownika
model Test {
  id             Int       @id @default(autoincrement())
  userId         Int
  testTemplateId Int
  userAnswer     String
  isCorrect      Boolean
  createdAt      DateTime  @default(now())

  user           User          @relation(fields: [userId], references: [id])
  template       TestTemplate  @relation(fields: [testTemplateId], references: [id])
}

/// Pojedynki między użytkownikami
model Duel {
  id          Int      @id @default(autoincrement())
  player1Id   Int
  player2Id   Int
  winnerId    Int?
  startedAt   DateTime @default(now())
  endedAt     DateTime?

  player1     User     @relation("Player1", fields: [player1Id], references: [id])
  player2     User     @relation("Player2", fields: [player2Id], references: [id])
  winner      User?    @relation("Winner", fields: [winnerId], references: [id])
}